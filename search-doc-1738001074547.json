{"searchDocs":[{"title":"byteparse","type":0,"sectionRef":"#","url":"/byteparse/api/byteparse","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"byteparse","url":"/byteparse/api/byteparse#properties","content":" ","version":null,"tagName":"h2"},{"title":"version​","type":1,"pageTitle":"byteparse","url":"/byteparse/api/byteparse#version","content":"&lt;/&gt; byteparse.version: string The byteparse version. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"byteparse","url":"/byteparse/api/byteparse#functions","content":" ","version":null,"tagName":"h2"},{"title":"trim_zbuffer​","type":1,"pageTitle":"byteparse","url":"/byteparse/api/byteparse#trim_zbuffer","content":"&lt;/&gt; byteparse.trim_zbuffer(buf: buffer) → buffer Removes the first encountered null byte, and all following data, from a buffer.  ","version":null,"tagName":"h3"},{"title":"trim_zstring​","type":1,"pageTitle":"byteparse","url":"/byteparse/api/byteparse#trim_zstring","content":"&lt;/&gt; byteparse.trim_zstring(str: string) → string Removes the first encountered null byte, and all following data, from a string.  ","version":null,"tagName":"h3"},{"title":"writer​","type":1,"pageTitle":"byteparse","url":"/byteparse/api/byteparse#writer","content":"&lt;/&gt; byteparse.writer( start_size: number,-- The initial size of the writer buffer. expansion_rate: number?-- Specifies the expansion rate when attempting to write more data than the internal buffer can take. ) → writer-- The new writer instance. Creates a blank writer instance.  ","version":null,"tagName":"h3"},{"title":"reader​","type":1,"pageTitle":"byteparse","url":"/byteparse/api/byteparse#reader","content":"&lt;/&gt; byteparse.reader( b: buffer-- The buffer to read from. ) → reader-- The new reader instance. Creates a reader instance from a buffer. ","version":null,"tagName":"h3"},{"title":"Datatypes","type":0,"sectionRef":"#","url":"/byteparse/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#introduction","content":" ","version":"Next","tagName":"h2"},{"title":"Types​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#types","content":" ","version":"Next","tagName":"h2"},{"title":"u8​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#u8","content":" Description: An unsigned 8 bit integer. Size: 1 Byte Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"u16​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#u16","content":" Description: An unsigned 16 bit integer. Size: 2 Bytes Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"u32​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#u32","content":" Description: An unsigned 32 bit integer. Size: 4 Bytes Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"i8​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#i8","content":" Description: An signed 8 bit integer. Size: 1 Byte Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"i16​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#i16","content":" Description: An signed 16 bit integer. Size: 2 Bytes Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"i32​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#i32","content":" Description: An signed 32 bit integer. Size: 4 Bytes Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"f32​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#f32","content":" Description: An 32 IEEE 754 floating point. Size: 4 Bytes Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"f64​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#f64","content":" Description: An 32 IEEE 754 floating point. Size: 8 Bytes Encoding: Native   ","version":"Next","tagName":"h3"},{"title":"varint​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#varint","content":" Description: A ProtoBuf Base 128 Variable-width integer. Size: 1..10 bytes Encoding: See https://protobuf.dev/programming-guides/encoding/#varints   ","version":"Next","tagName":"h3"},{"title":"bool​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#bool","content":" Description: A boolean value (1/0) Size: 1 Byte Encoding: Encoded as either a 0 or 1 u8   ","version":"Next","tagName":"h3"},{"title":"null​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#null","content":" Description: A null byte (0) Size: 1 Byte Encoding: Encoded as a 0 u8   ","version":"Next","tagName":"h3"},{"title":"string​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#string","content":" Description: A raw string Size: Any Encoding: String written directly with no further metadata   ","version":"Next","tagName":"h3"},{"title":"lstring​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#lstring","content":" Description: A length-prefixed string Size: 0..10 + 0..2^64 Bytes Encoding: String written directly with a varint prefixed, denoting length   ","version":"Next","tagName":"h3"},{"title":"zstring​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#zstring","content":" Description: A null terminated string Size: Any Encoding: String written directly followed by a null byte   ","version":"Next","tagName":"h3"},{"title":"array​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#array","content":" Description: An array of serialisable values Size: Any Encoding: Array written directly with no further metadata   ","version":"Next","tagName":"h3"},{"title":"larray​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#larray","content":" Description: A length-prefixed array of serialisable values Size: 0..10 + 0..2^64 Bytes Encoding: Array written directly with a varint prefixed, denoting length   ","version":"Next","tagName":"h3"},{"title":"zarray​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#zarray","content":" Description: A null terminated array of serialisable values Size: Any Encoding: String written directly followed by a null byte   ","version":"Next","tagName":"h3"},{"title":"buffer​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#buffer","content":" Description: A raw buffer Size: Any Encoding: Buffer written directly with no further metadata   ","version":"Next","tagName":"h3"},{"title":"lbuffer​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#lbuffer","content":" Description: A length-prefixed buffer Size: 0..10 + 0..2^64 Bytes Encoding: Buffer written directly with a varint prefixed, denoting length   ","version":"Next","tagName":"h3"},{"title":"zbuffer​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#zbuffer","content":" Description: A null terminated buffer Size: Any Encoding: Buffer written directly followed by a null byte   ","version":"Next","tagName":"h3"},{"title":"vector​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#vector","content":" Description: A 3 or 4-width vector Size: 12 or 16 Bytes, depending on vector size Encoding: 3 or 4 f32s   ","version":"Next","tagName":"h3"},{"title":"table​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#table","content":" Description: A serialisable luau table Size: Any Encoding:  has_array = u1 has_dict = u1 if has_array then array_length = varint ...array_value = any -- (repeated for 1..array_length) end if has_dict then dict_length = varint ... { key = any value = any } -- (repeated for 1..dict_length) end   ","version":"Next","tagName":"h3"},{"title":"any​","type":1,"pageTitle":"Datatypes","url":"/byteparse/docs/intro#any","content":" Description: Any serialisable luau value Size: Any Encoding: A Type ID followed by a the values   Type\tType ID\tEncoded Asnil\t0\tNothing boolean\t1\tu8 number\t2\tf64 vector\t3\tvector string\t4\tlstring buffer\t5\tlstring table\t6\ttable ","version":"Next","tagName":"h3"},{"title":"reader","type":0,"sectionRef":"#","url":"/byteparse/api/reader","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#functions","content":" ","version":null,"tagName":"h2"},{"title":"set_cursor​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#set_cursor","content":"&lt;/&gt; reader.set_cursor( to: number-- The position to move to. ) → () Sets the read cursor to a set position.  ","version":null,"tagName":"h3"},{"title":"get_cursor​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#get_cursor","content":"&lt;/&gt; reader.get_cursor() → number-- The cursor position. Gets the current cursor position.  ","version":null,"tagName":"h3"},{"title":"set_vector_size​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#set_vector_size","content":"&lt;/&gt; reader.set_vector_size( to: number-- The vector size, must be either 3 or 4. ) → () Sets the vector size. The given vector size cannot exceed the VMs 'LUA_VECTOR_SIZE' size.  ","version":null,"tagName":"h3"},{"title":"read_u8​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_u8","content":"&lt;/&gt; reader.read_u8() → number-- The read value. Reads an unsigned 8 bit integer.  ","version":null,"tagName":"h3"},{"title":"read_u16​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_u16","content":"&lt;/&gt; reader.read_u16() → number-- The read value. Reads an unsigned 16 bit integer.  ","version":null,"tagName":"h3"},{"title":"read_u32​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_u32","content":"&lt;/&gt; reader.read_u32() → number-- The read value. Reads an unsigned 32 bit integer.  ","version":null,"tagName":"h3"},{"title":"read_i8​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_i8","content":"&lt;/&gt; reader.read_i8() → number-- The read value. Reads a signed 8 bit integer.  ","version":null,"tagName":"h3"},{"title":"read_i16​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_i16","content":"&lt;/&gt; reader.read_i16() → number-- The read value. Reads a signed 16 bit integer.  ","version":null,"tagName":"h3"},{"title":"read_i32​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_i32","content":"&lt;/&gt; reader.read_i32() → number-- The read value. Reads a signed 32 bit integer.  ","version":null,"tagName":"h3"},{"title":"read_f32​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_f32","content":"&lt;/&gt; reader.read_f32() → number-- The read value. Reads a 32 bit floating point number.  ","version":null,"tagName":"h3"},{"title":"read_f64​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_f64","content":"&lt;/&gt; reader.read_f64() → number-- The read value. Reads a 64 bit floating point number.  ","version":null,"tagName":"h3"},{"title":"read_varint​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_varint","content":"&lt;/&gt; reader.read_varint() → number-- The read value. Reads a ProtoBuf Base 128 Variable-width integer.  ","version":null,"tagName":"h3"},{"title":"read_bool​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_bool","content":"&lt;/&gt; reader.read_bool() → boolean-- The read boolean. Reads a boolean.  ","version":null,"tagName":"h3"},{"title":"read_string​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_string","content":"&lt;/&gt; reader.read_string( length: number?-- The string length. ) → string-- The read string. Reads a string.  ","version":null,"tagName":"h3"},{"title":"read_lstring​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_lstring","content":"&lt;/&gt; reader.read_lstring() → string-- The read string. Reads a length prefixed string.  ","version":null,"tagName":"h3"},{"title":"read_zstring​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_zstring","content":"&lt;/&gt; reader.read_zstring() → string-- The read string. Reads a null terminated string.  ","version":null,"tagName":"h3"},{"title":"read_buffer​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_buffer","content":"&lt;/&gt; reader.read_buffer(length: number) → buffer-- The read buffer. Reads a buffer.  ","version":null,"tagName":"h3"},{"title":"read_lbuffer​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_lbuffer","content":"&lt;/&gt; reader.read_lbuffer() → buffer-- The read buffer. Reads a length prefixed buffer.  ","version":null,"tagName":"h3"},{"title":"read_zbuffer​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_zbuffer","content":"&lt;/&gt; reader.read_zbuffer() → buffer-- The read buffer. Reads a null terminated buffer.  ","version":null,"tagName":"h3"},{"title":"read_array​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_array","content":"&lt;/&gt; reader.read_array( size: number,-- Amount of values to read, or -1 to read until the decoder returns nil. decoder: (B...) → T?,-- Function to read values, or terminate if nil is returned. ...: B...-- Additional data to pass to the decoder. ) → {T}-- Array of read values. Reads an array of values. Assumes decoder advances the cursor. Stops reading if the decoder returns nil.  ","version":null,"tagName":"h3"},{"title":"read_larray​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_larray","content":"&lt;/&gt; reader.read_larray( decoder: (B...) → T?,-- Function to read values, or terminate if nil is returned. ...: B...-- Additional data to pass to the decoder. ) → {T}-- Array of read values. Reads a length prefixed array of values. Assumes decoder advances the cursor. Stops reading if the decoder returns nil.  ","version":null,"tagName":"h3"},{"title":"read_zarray​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_zarray","content":"&lt;/&gt; reader.read_zarray( decoder: (B...) → T?,-- Function to read values, or terminate if nil is returned. ...: B...-- Additional data to pass to the decoder. ) → {T}-- Array of read values. Reads a null terminated array of values. Assumes decoder advances the cursor. Stops reading if the next byte is 0, or if the decoder returns nil.  ","version":null,"tagName":"h3"},{"title":"read_vector​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_vector","content":"&lt;/&gt; reader.read_vector() → vector-- The read vector. Reads a vector.  ","version":null,"tagName":"h3"},{"title":"read_table​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_table","content":"&lt;/&gt; reader.read_table() → SerialisableTable-- The read table. Reads a table.  ","version":null,"tagName":"h3"},{"title":"read_any​","type":1,"pageTitle":"reader","url":"/byteparse/api/reader#read_any","content":"&lt;/&gt; reader.read_any() → Serialisable-- The read value. Reads a type-prefixed value. ","version":null,"tagName":"h3"},{"title":"writer","type":0,"sectionRef":"#","url":"/byteparse/api/writer","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#functions","content":" ","version":null,"tagName":"h2"},{"title":"set_capacity​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#set_capacity","content":"&lt;/&gt; writer.set_capacity( to: number-- The new size. ) → () Resizes the internal buffer to a set amount.  ","version":null,"tagName":"h3"},{"title":"expand​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#expand","content":"&lt;/&gt; writer.expand( needed_size: number-- The size amount needed. ) → () Ensures the internal buffer can handle needed_size more data by expanding the capacity if necessary. Relative to the cursor.  ","version":null,"tagName":"h3"},{"title":"set_cursor​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#set_cursor","content":"&lt;/&gt; writer.set_cursor( to: number-- The position to move to. ) → () Sets the write cursor to a set position.  ","version":null,"tagName":"h3"},{"title":"get_cursor​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#get_cursor","content":"&lt;/&gt; writer.get_cursor() → number-- The cursor position. Gets the current cursor position.  ","version":null,"tagName":"h3"},{"title":"get_size​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#get_size","content":"&lt;/&gt; writer.get_size() → number-- The current written size. Gets the current written size.  ","version":null,"tagName":"h3"},{"title":"get_capacity​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#get_capacity","content":"&lt;/&gt; writer.get_capacity() → () Returns the internal buffer capacity.  ","version":null,"tagName":"h3"},{"title":"set_vector_size​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#set_vector_size","content":"&lt;/&gt; writer.set_vector_size( to: number-- The vector size, must be either 3 or 4. ) → () Sets the vector size. The given vector size cannot exceed the VMs 'LUA_VECTOR_SIZE' size.  ","version":null,"tagName":"h3"},{"title":"to_buffer​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#to_buffer","content":"&lt;/&gt; writer.to_buffer() → buffer-- The written data. Returns a buffer containing the written data.  ","version":null,"tagName":"h3"},{"title":"to_string​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#to_string","content":"&lt;/&gt; writer.to_string() → buffer Returns a string containing the written data.  ","version":null,"tagName":"h3"},{"title":"write_u8​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_u8","content":"&lt;/&gt; writer.write_u8( value: number-- The u8 value to write. ) → () Writes an unsigned 8 bit integer. Wraps around if provided a number larger than 8 bits.  ","version":null,"tagName":"h3"},{"title":"write_u16​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_u16","content":"&lt;/&gt; writer.write_u16( value: number-- The u16 value to write. ) → () Writes an unsigned 16 bit integer. Wraps around if provided a number larger than 16 bits.  ","version":null,"tagName":"h3"},{"title":"write_u32​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_u32","content":"&lt;/&gt; writer.write_u32( value: number-- The u32 value to write. ) → () Writes an unsigned 32 bit integer. Wraps around if provided a number larger than 32 bits.  ","version":null,"tagName":"h3"},{"title":"write_i8​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_i8","content":"&lt;/&gt; writer.write_i8( value: number-- The i8 value to write. ) → () Writes an unsigned 8 bit integer. Wraps around if provided a number larger than 8 bits.  ","version":null,"tagName":"h3"},{"title":"write_i16​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_i16","content":"&lt;/&gt; writer.write_i16( value: number-- The i16 value to write. ) → () Writes an unsigned 16 bit integer. Wraps around if provided a number larger than 16 bits.  ","version":null,"tagName":"h3"},{"title":"write_i32​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_i32","content":"&lt;/&gt; writer.write_i32( value: number-- The i32 value to write. ) → () Writes an unsigned 32 bit integer. Wraps around if provided a number larger than 32 bits.  ","version":null,"tagName":"h3"},{"title":"write_f32​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_f32","content":"&lt;/&gt; writer.write_f32( value: number-- The f32 value to write. ) → () Writes a 32 bit floating point number. Wraps around if provided a number larger than 32 bits.  ","version":null,"tagName":"h3"},{"title":"write_f64​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_f64","content":"&lt;/&gt; writer.write_f64( value: number-- The f64 value to write. ) → () Writes a 64 bit floating point number.  ","version":null,"tagName":"h3"},{"title":"write_varint​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_varint","content":"&lt;/&gt; writer.write_varint( value: number-- The varint to write. ) → () Writes a ProtoBuf Base 128 Variable-width integer.  ","version":null,"tagName":"h3"},{"title":"write_bool​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_bool","content":"&lt;/&gt; writer.write_bool( value: boolean-- The boolean to write. ) → () Writes a boolean.  ","version":null,"tagName":"h3"},{"title":"write_null​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_null","content":"&lt;/&gt; writer.write_null() → () Writes a null byte.  ","version":null,"tagName":"h3"},{"title":"write_string​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_string","content":"&lt;/&gt; writer.write_string( value: string,-- The string to write. size: number?-- The maximum size of the string. ) → () Writes a string without a prefixed length, optionally trimmed to a maximum size. Note: You should ensure the binary format has a way of encoding the strings size, as this function writes the string raw and doesn't write any data a reader can use to determine the size.  ","version":null,"tagName":"h3"},{"title":"write_lstring​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_lstring","content":"&lt;/&gt; writer.write_lstring( value: string,-- The string to write. size: number?-- The maximum size of the string. ) → () Writes a length prefixed string.  ","version":null,"tagName":"h3"},{"title":"write_zstring​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_zstring","content":"&lt;/&gt; writer.write_zstring( value: string,-- The string to write. size: number?-- The maximum size of the string. ) → () Writes a null terminated (C Style) string. WARNING This function doesn't check whether the passed value is null-safe, and will write the entire string regardless of embedded null bytes. Consider wrapping the passed value with byteparse.trim_zstring if you can't be sure there are no embedded null bytes.  ","version":null,"tagName":"h3"},{"title":"write_buffer​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_buffer","content":"&lt;/&gt; writer.write_buffer( value: buffer,-- The buffer to write. offset: number?,-- The starting offset from the buffer. size: number?-- The amount of bytes from the buffer. ) → () Writes a buffer without a prefixed length, optionally trimmed to a maximum size. Note: You should ensure the binary format has a way of encoding the buffers size, as this function writes the buffer raw and doesn't write any data a reader can use to determine the size.  ","version":null,"tagName":"h3"},{"title":"write_lbuffer​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_lbuffer","content":"&lt;/&gt; writer.write_lbuffer( value: buffer,-- The buffer to write. offset: number?,-- The starting offset from the buffer. size: number?-- The amount of bytes from the buffer. ) → () Writes a length prefixed buffer.  ","version":null,"tagName":"h3"},{"title":"write_zbuffer​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_zbuffer","content":"&lt;/&gt; writer.write_zbuffer( value: buffer,-- The buffer to write. offset: number?,-- The starting offset from the buffer. size: number?-- The amount of bytes from the buffer. ) → () Writes a null terminated (C Style) buffer. Assumes the buffer is null safe. WARNING This function doesn't check whether the passed value is null-safe, and will write the entire buffer regardless of embedded null bytes. Consider wrapping the passed value with byteparse.trim_zbuffer if you can't be sure there are no embedded null bytes.  ","version":null,"tagName":"h3"},{"title":"write_array​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_array","content":"&lt;/&gt; writer.write_array( value: {T},-- The buffer to write. encoder: ( T, B... ) → (),-- The encoder function. ...: B...-- Additional data to pass to the encoder. ) → () Writes a array without a prefixed length. Assumes the encoder function advances the cursor. Note: You should ensure the binary format has a way of encoding the arrays size, as this function doesn't write any data a reader can use to determine the size.  ","version":null,"tagName":"h3"},{"title":"write_larray​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_larray","content":"&lt;/&gt; writer.write_larray( value: {T},-- The buffer to write. encoder: ( T, B... ) → (),-- The encoder function. ...: B...-- Additional data to pass to the encoder. ) → () Writes a length prefixed array. Assumes the encoder function advances the cursor.  ","version":null,"tagName":"h3"},{"title":"write_zarray​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_zarray","content":"&lt;/&gt; writer.write_zarray( value: {T},-- The buffer to write. encoder: ( T, B... ) → (),-- The encoder function. ...: B...-- Additional data to pass to the encoder. ) → () Writes a null terminated array. Assumes the encoder function advances the cursor. The encoder function can freely emit null bytes after the first byte, provided it advances the cursor properly.  ","version":null,"tagName":"h3"},{"title":"write_vector​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_vector","content":"&lt;/&gt; writer.write_vector( value: vector-- The vector to write. ) → () Writes a vector.  ","version":null,"tagName":"h3"},{"title":"write_table​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_table","content":"&lt;/&gt; writer.write_table( value: SerialisableTable-- The table to write. ) → () Writes a serialisable table.  ","version":null,"tagName":"h3"},{"title":"write_any​","type":1,"pageTitle":"writer","url":"/byteparse/api/writer#write_any","content":"&lt;/&gt; writer.write_any(value: Serialisable) → () Writes any serialisable type, with the Luau TValue prefixed. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}