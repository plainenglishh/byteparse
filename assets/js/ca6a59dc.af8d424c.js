"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[965],{8563:e=>{e.exports=JSON.parse('{"functions":[{"name":"advance","desc":"Advances the read cursor by a set amount following a read.\\n\\n    ","params":[{"name":"offset","desc":"","lua_type":"number"}],"returns":[],"function_type":"static","ignore":true,"source":{"line":746,"path":"lib/init.luau"}},{"name":"set_cursor","desc":"Sets the read cursor to a set position.\\n\\n    ","params":[{"name":"position","desc":"","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":755,"path":"lib/init.luau"}},{"name":"get_cursor","desc":"Returns the current cursor position.\\n\\n    ","params":[],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"static","source":{"line":764,"path":"lib/init.luau"}},{"name":"set_default_vector_size","desc":"Sets the vector size. The given vector size cannot exceed the VMs\\n\'LUA_VECTOR_SIZE\' size.\\n\\n    ","params":[{"name":"vec_size","desc":"","lua_type":"number"}],"returns":[],"function_type":"static","errors":[{"lua_type":"InvalidVecSize","desc":"Errors when passed a vector size that isn\'t 3 or 4."}],"source":{"line":784,"path":"lib/init.luau"}},{"name":"read_u8","desc":"Reads an unsigned 8 bit integer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"u8\\r\\n"}],"function_type":"static","source":{"line":795,"path":"lib/init.luau"}},{"name":"read_u16","desc":"Reads an unsigned 16 bit integer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"u16\\r\\n"}],"function_type":"static","source":{"line":804,"path":"lib/init.luau"}},{"name":"read_u32","desc":"Reads an unsigned 32 bit integer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"u32\\r\\n"}],"function_type":"static","source":{"line":813,"path":"lib/init.luau"}},{"name":"read_i8","desc":"Reads a signed 8 bit integer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"i8\\r\\n"}],"function_type":"static","source":{"line":822,"path":"lib/init.luau"}},{"name":"read_i16","desc":"Reads a signed 16 bit integer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"i16\\r\\n"}],"function_type":"static","source":{"line":831,"path":"lib/init.luau"}},{"name":"read_i32","desc":"Reads a signed 32 bit integer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"i32\\r\\n"}],"function_type":"static","source":{"line":840,"path":"lib/init.luau"}},{"name":"read_f32","desc":"Reads a 32 bit floating point number.\\n    ","params":[],"returns":[{"desc":"","lua_type":"f32\\r\\n"}],"function_type":"static","source":{"line":849,"path":"lib/init.luau"}},{"name":"read_f64","desc":"Reads a 64 bit floating point number.\\n    ","params":[],"returns":[{"desc":"","lua_type":"f64\\r\\n"}],"function_type":"static","source":{"line":858,"path":"lib/init.luau"}},{"name":"read_varint","desc":"Reads a ProtoBuf [Base 128 Variable-width integer](https://protobuf.dev/programming-guides/encoding/#varints).\\n    ","params":[],"returns":[{"desc":"","lua_type":"varint \\r\\n"}],"function_type":"static","source":{"line":867,"path":"lib/init.luau"}},{"name":"read_bool","desc":"Reads a boolean.\\n    ","params":[],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":883,"path":"lib/init.luau"}},{"name":"read_string","desc":"Reads a string.\\n    ","params":[{"name":"length","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":890,"path":"lib/init.luau"}},{"name":"read_lstring","desc":"Reads a length prefixed string.\\n    ","params":[],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":899,"path":"lib/init.luau"}},{"name":"read_zstring","desc":"Reads a null terminated string.\\n\\nIf `size` is provided, this function will consume the entire string\\nbuffer, disregarding data past the first null byte. If no null byte is\\nencountered when the entire `size` has been read, it returns what has\\nbeen already been read and exits.\\n    ","params":[{"name":"size","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"string\\r\\n"}],"function_type":"static","source":{"line":912,"path":"lib/init.luau"}},{"name":"read_buffer","desc":"Reads a buffer.\\n    ","params":[{"name":"length","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"buffer\\r\\n"}],"function_type":"static","source":{"line":936,"path":"lib/init.luau"}},{"name":"read_lbuffer","desc":"Reads a length prefixed buffer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"buffer\\r\\n"}],"function_type":"static","source":{"line":946,"path":"lib/init.luau"}},{"name":"read_zbuffer","desc":"Reads a null terminated buffer.\\n    ","params":[],"returns":[{"desc":"","lua_type":"buffer\\r\\n"}],"function_type":"static","source":{"line":954,"path":"lib/init.luau"}},{"name":"read_array","desc":"Reads an array of values.\\n\\nAssumes `reader_callback` advances the cursor.\\nStops reading if the reader_callback returns nil.\\n\\n    ","params":[{"name":"size","desc":"","lua_type":"number"},{"name":"reader_callback","desc":"","lua_type":"(B...) -> T?"},{"name":"...","desc":"Additional parameters to pass to the reader_callback.","lua_type":"B..."}],"returns":[{"desc":"","lua_type":"{T}\\r\\n"}],"function_type":"static","source":{"line":976,"path":"lib/init.luau"}},{"name":"read_larray","desc":"Reads a length prefixed array of values.\\n\\nAssumes `reader_callback` advances the cursor.\\nStops reading if the reader_callback returns nil.\\n\\n    ","params":[{"name":"reader_callback","desc":"","lua_type":"(B...) -> T?"},{"name":"...","desc":"Additional parameters to pass to the reader_callback.","lua_type":"B..."}],"returns":[{"desc":"","lua_type":"{T}\\r\\n"}],"function_type":"static","source":{"line":1009,"path":"lib/init.luau"}},{"name":"read_zarray","desc":"Reads a null terminated array of values.\\n\\nAssumes `reader_callback` advances the cursor.\\nStops reading if the next byte is `0`, or if the reader_callback returns nil.\\n\\n    ","params":[{"name":"reader_callback","desc":"","lua_type":"(B...) -> T?"},{"name":"...","desc":"Additional parameters to pass to the reader_callback.","lua_type":"B..."}],"returns":[{"desc":"","lua_type":"{T}\\r\\n"}],"function_type":"static","source":{"line":1022,"path":"lib/init.luau"}},{"name":"read_vector","desc":"Reads a vector.\\n\\nThis function reads either three or four (depending on vector_size)\\n    ","params":[{"name":"vector_size","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"vector\\r\\n"}],"function_type":"static","source":{"line":1044,"path":"lib/init.luau"}},{"name":"read_table","desc":"Reads a table.\\n    ","params":[],"returns":[{"desc":"","lua_type":"SerialisableTable\\r\\n"}],"function_type":"static","source":{"line":1060,"path":"lib/init.luau"}},{"name":"read_any","desc":"Reads a type-prefixed value.\\n\\n    ","params":[],"returns":[{"desc":"","lua_type":"Serialisable\\r\\n"}],"function_type":"static","errors":[{"lua_type":"InvalidTypeID","desc":"Errors when an unknown type id is read."}],"source":{"line":1092,"path":"lib/init.luau"}},{"name":"read_optional","desc":"Reads an optional value.\\n\\nThis function reads a potentially absent value by reading a boolean to\\ndetermine whether the value is present, and reading the value with\\n`reader_callback` if it is.\\n\\n#### Example\\n```lua\\nlocal reader = byteparse.reader(byteparse.buffer_from_hex(\\"0101 00\\"));\\nreader.read_optional(reader.read_u8); -- Returns `1`\\nreader.read_optional(reader.read_u8); -- Returns `nil`\\n```\\n    ","params":[{"name":"reader_callback","desc":"","lua_type":"(B...) -> T"},{"name":"...","desc":"","lua_type":"B..."}],"returns":[{"desc":"","lua_type":"T?\\r\\n"}],"function_type":"static","source":{"line":1128,"path":"lib/init.luau"}}],"properties":[],"types":[],"name":"reader","desc":"Reader instance used to deserialise to binary formats.\\n\\n    ","source":{"line":773,"path":"lib/init.luau"}}')}}]);