"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[965],{8563:e=>{e.exports=JSON.parse('{"functions":[{"name":"advance","desc":"Advances the read cursor by a set amount following a read.\\n\\n    ","params":[{"name":"by","desc":"How much to advance the cursor.","lua_type":"number"}],"returns":[],"function_type":"static","ignore":true,"source":{"line":707,"path":"lib/init.luau"}},{"name":"set_cursor","desc":"Sets the read cursor to a set position.\\n\\n    ","params":[{"name":"to","desc":"The position to move to.","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":717,"path":"lib/init.luau"}},{"name":"get_cursor","desc":"Gets the current cursor position.\\n\\n    ","params":[],"returns":[{"desc":"The cursor position.","lua_type":"number"}],"function_type":"static","source":{"line":727,"path":"lib/init.luau"}},{"name":"set_vector_size","desc":"Sets the vector size. The given vector size cannot exceed the VMs\\n\'LUA_VECTOR_SIZE\' size.\\n\\n    ","params":[{"name":"to","desc":"The vector size, must be either 3 or 4.","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":748,"path":"lib/init.luau"}},{"name":"read_u8","desc":"Reads an unsigned 8 bit integer.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":762,"path":"lib/init.luau"}},{"name":"read_u16","desc":"Reads an unsigned 16 bit integer.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":774,"path":"lib/init.luau"}},{"name":"read_u32","desc":"Reads an unsigned 32 bit integer.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":786,"path":"lib/init.luau"}},{"name":"read_i8","desc":"Reads a signed 8 bit integer.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":798,"path":"lib/init.luau"}},{"name":"read_i16","desc":"Reads a signed 16 bit integer.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":810,"path":"lib/init.luau"}},{"name":"read_i32","desc":"Reads a signed 32 bit integer.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":822,"path":"lib/init.luau"}},{"name":"read_f32","desc":"Reads a 32 bit floating point number.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":834,"path":"lib/init.luau"}},{"name":"read_f64","desc":"Reads a 64 bit floating point number.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":846,"path":"lib/init.luau"}},{"name":"read_varint","desc":"Reads a ProtoBuf [Base 128 Variable-width integer](https://protobuf.dev/programming-guides/encoding/#varints).\\n    \\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"number"}],"function_type":"static","source":{"line":858,"path":"lib/init.luau"}},{"name":"read_bool","desc":"Reads a boolean.\\n\\n    ","params":[],"returns":[{"desc":"The read boolean.","lua_type":"boolean"}],"function_type":"static","source":{"line":877,"path":"lib/init.luau"}},{"name":"read_string","desc":"Reads a string.\\n\\n    ","params":[{"name":"length","desc":"The string length.","lua_type":"number?"}],"returns":[{"desc":"The read string.","lua_type":"string"}],"function_type":"static","source":{"line":888,"path":"lib/init.luau"}},{"name":"read_lstring","desc":"Reads a length prefixed string.\\n\\n    ","params":[],"returns":[{"desc":"The read string.","lua_type":"string"}],"function_type":"static","source":{"line":900,"path":"lib/init.luau"}},{"name":"read_zstring","desc":"Reads a null terminated string.\\n\\n    ","params":[],"returns":[{"desc":"The read string.","lua_type":"string"}],"function_type":"static","source":{"line":911,"path":"lib/init.luau"}},{"name":"read_buffer","desc":"Reads a buffer.\\n\\n    ","params":[{"name":"length","desc":"","lua_type":"number"}],"returns":[{"desc":"The read buffer.","lua_type":"buffer"}],"function_type":"static","source":{"line":929,"path":"lib/init.luau"}},{"name":"read_lbuffer","desc":"Reads a length prefixed buffer.\\n       \\n    ","params":[],"returns":[{"desc":"The read buffer.","lua_type":"buffer"}],"function_type":"static","source":{"line":942,"path":"lib/init.luau"}},{"name":"read_zbuffer","desc":"Reads a null terminated buffer.\\n\\n    ","params":[],"returns":[{"desc":"The read buffer.","lua_type":"buffer"}],"function_type":"static","source":{"line":953,"path":"lib/init.luau"}},{"name":"read_array","desc":"Reads an array of values.\\n\\nAssumes `decoder` advances the cursor.\\nStops reading if the decoder returns nil.\\n\\n    ","params":[{"name":"size","desc":"Amount of values to read, or -1 to read until the decoder returns nil.","lua_type":"number"},{"name":"decoder","desc":"Function to read values, or terminate if nil is returned.","lua_type":"(B...) -> T?"},{"name":"...","desc":"Additional data to pass to the decoder.","lua_type":"B..."}],"returns":[{"desc":"Array of read values.","lua_type":"{T}"}],"function_type":"static","source":{"line":979,"path":"lib/init.luau"}},{"name":"read_larray","desc":"Reads a length prefixed array of values.\\n\\nAssumes `decoder` advances the cursor.\\nStops reading if the decoder returns nil.\\n\\n    ","params":[{"name":"decoder","desc":"Function to read values, or terminate if nil is returned.","lua_type":"(B...) -> T?"},{"name":"...","desc":"Additional data to pass to the decoder.","lua_type":"B..."}],"returns":[{"desc":"Array of read values.","lua_type":"{T}"}],"function_type":"static","source":{"line":1015,"path":"lib/init.luau"}},{"name":"read_zarray","desc":"Reads a null terminated array of values.\\n\\nAssumes `decoder` advances the cursor.\\nStops reading if the next byte is `0`, or if the decoder returns nil.\\n\\n    ","params":[{"name":"decoder","desc":"Function to read values, or terminate if nil is returned.","lua_type":"(B...) -> T?"},{"name":"...","desc":"Additional data to pass to the decoder.","lua_type":"B..."}],"returns":[{"desc":"Array of read values.","lua_type":"{T}"}],"function_type":"static","source":{"line":1031,"path":"lib/init.luau"}},{"name":"read_vector","desc":"Reads a vector.\\n\\n    ","params":[],"returns":[{"desc":"The read vector.","lua_type":"vector"}],"function_type":"static","source":{"line":1054,"path":"lib/init.luau"}},{"name":"read_table","desc":"Reads a table.\\n    \\n    ","params":[],"returns":[{"desc":"The read table.","lua_type":"SerialisableTable"}],"function_type":"static","source":{"line":1073,"path":"lib/init.luau"}},{"name":"read_any","desc":"Reads a type-prefixed value.\\n\\n    ","params":[],"returns":[{"desc":"The read value.","lua_type":"Serialisable"}],"function_type":"static","source":{"line":1106,"path":"lib/init.luau"}}],"properties":[],"types":[],"name":"reader","desc":"Reader instance used to deserialise to binary formats.\\n\\n    ","source":{"line":736,"path":"lib/init.luau"}}')}}]);